//
// ForSH -- a Forth-like way to define
// textures.
// 
// Imagine a  FORTH stack machine
// where stack items can be anything GLSL
// can handle, like vec4.
// 
//  Define your textures with this,
// and they will be translated into GLSL ....
//
// // is a comment to EOL
// ( would be more forsh... )
//
// tokens are separated by whitespace or comments
// Always! Better throw in a few more spaces.
// : ; and numbers are handeled by the parser
//
// Numbers are passed verbatim
//
// A colon  : followed by a name defines a new
// function(macro?method?phrase?) up
// to yhe next standalone semicolon ; token.
// For convenience, both
// : name and :name are allowed, eg.
// :do any thing ; 
// later 'do'' expands
// to 'any thing'.  
// Warning: ';' is a token, and must be surrounded ny whitespace!
// : Good thing ;    : Bad idea; ( <-- needs a space ) ;
// ( so are comment brackets )
// known phrases are expanded inline
// on use
// redefinitions  override previous onrs
//
//------- strictly protected private internal:
// 
// default opcodes handle basic operations
// ' passes verbatim bytecodes
//
:a 'a ; :x 'x ; :y 'y ; :z 'z ; // extract float
:A 'A ; :X 'X ; : Y  'Y ; :Z 'Z ; // set component
:dup 'D ;  ( x y -- y x ) // <-- that is a FORTH-comment
:swap 'S ;
:drop 'd ;
:rot 'r ;
:mod '% ;     :% '% ;
:+ '+ ; :- '- ; :/ '/ ; :* '* ;
:step  '! ;     :! '! ; 
:smoothstep 'T ;
:rotateZ 'R ;
:length '| ; :| '| ;

// and go through the ( now almost obsolete)
// byte-code handler

// anything starting witj a digit is passed verbatim

:PI 3.14159265 ;     :2PI PI dup + ;

// " introduces a glsl function call like
// "name argn outtype intypes...
// types are 
// -1:int 0: any 1:float
//  2:vec2 3:vec3 4:vec4
// which must have a direct glsl equivalent
//  eg.
// sin has 1 parameter and 
// is completely overloaded
:sin "sin 1 0 0 ; 
:cos "cos 1 0 0 ;
// special way to call atan to determin polar coords
// vec2 atan(float x, float y)
:atan2 "atan 2 1 1 1 ;
:acos "acos 1 0  0  ;
: atan '"atan 1 0 0 ;

// -1 parameters are  just passed verbatim, eg.
// the predefined uniforms and inputs
// vertColor is also already pushed at start
: color? "vertColor  -1 4 ;
: uv? "vertTexCoord -1 4 ;
:pos? "obj_position -1 4 ;
:coord? "gl_FragCoord -1 4 ;
:depth? "gl_FragCoord.z -1 1 ;

// ## starts a line to be added to the shader vrrbatim
// normally dont, this is what we want to avoid, GLSL!
// Used to introduce your own uniforms
##uniform vec4 param ; // the comment is passed, too
##uniform  float millis;
  : millis? "millis -1 1 ;
:uniscale? $ ; // $ and ? are deprecated
 : uniparam? ? ;
: $ "param.w -1 1 ; // note that order doesnt matter
: ? "param -1 4 ;
// or functions better(?) expressed in glsl
// ##vec4 quatsch(vec2 huch,float f){
// ##   return vec4(huch.yx,f,cos(f));
// ##}
//: quatsch??? "quatsch 2 4 2 1 ; 
// now we can access it like
//  red millis? quatsch???
//: quatsch??? "quatsch 2 4 2 1 ; 


// vector builders
 : vec2 "vec2 2 2 1 1
 : vec3 "vec3 3 3 1 1 1 ; 
  :vec4 "vec4 4 4 1 1 1 1 ;
:xxA ( vec3 f ->vec4(vec3,f)  )
   "vec4 2 4 3 1 ;
:1A 1 A ;
// etc. pp. ...;
:clamp "clamp 3 0 0 0 0 ; 
: mix "mix 3 0 0 0 0 ; 
// todo: add more ( all) glsl funcs

// vector noise helpers
:fbm "fbm 1 1 2 ; :fbn fbm ; 
:fbm3 "fbm3 1 4 4  ;

// texture access
:tex "tex 1 4 2 ;
:texture uv? tex * ; ( lightcolor -- lighted_texture )
 // mimic normal texture shader

:dot "dot 2 1 0 0 ;
:norm "normalize 1 0 0 ;
          
:cellular  "cellular 1 2 3 ; // no shortcut, this is costly

   (  sr -> texture(sr).xyza )
:texelColor  2 + "texelColor 1 4 -1 ; // i -> texture-param
:texelFloat 2 + "texelFloat 1 1 -1 ; 


:param? 0 texelColor  ; // 
:scale? 1 texelFloat ; 

// no [ 1 2 + ], unfortunately

// common helpers
     :12/ 0.5 ;      :1Z 1 Z ;  :0Z 0 Z ;
     :1A* 1A * ;
     :0A 0 A ; 
     :1% 1 % ; : 1mod 1 mod ;

   :spos?  pos? 0A scale? / ; // scaled pos
  ( :rgb 1 swap  Z swap Y swap  X 1A ; )
  :rgb 1 vec4 ; // much better
  :red 1 0 0 rgb ;
  :green 0 1 0 rgb  ;
  :yellow 1 1 0 rgb ; // or red green + 1A ;
 : blue 0 0 1 rgb ;
 : black 0 1A ;
 : white  1 1A ; // force to vec4..is that needed?

      ( pos -- pos+noise )
       :addnoise dup // to position
             param? x 2 *  * // prescale
            fbm 
          // cellular
             ? z 5 * * + ; // postscaler
       :nzebra? 3 param? y *  ;
        :zebra  nzebra? * 1mod ; // 
        :sstripes 0.1 0.9  smoothstep ; 
        :stripes 0.5  step ; : nostripes ;
       : test1 spos? addnoise 1Z length 
           zebra  sstripes 1A * ; 
 
    :plot //f(x) -> bw
       x uv?
          y 0.8 / 0.1 -
          swap -
          | 0.02 step  ;

    : cos1 PI 2 * * cos 1 + 2 / ;

  : show uv? x 
      f?
      param? x +
     // sstripes
     plot 1A * ;

// note that because of late avaluation we can
  : f? 2 * cos1 ;
// later and then call show
 
 : angle_____  0 1 X  swap norm dot acos  ; // acos(dot(vector1, vector2));
 : angle dup x swap y  atan2 ; 
 : angle1 angle 2PI / ;
 : suv? uv? 0.5 - 2 * scale? / ;  // shift to 0 center
 :  floor dup 1% -  ;

     :ff dup fbm + 2 * cos fbm ;
     :noise dup ff ;
     :cylinder 0 Z | 1 % ; // radial rings
      :steps 0.5 0.8 smoothstep ; // step black rings over 


  : rings spos? cylinder ;
  : gtest 
    // red, original color, tinted
    red 0.5 * 
    uv? tex 
    rings steps
    rot
    mix 
    1A*
   ;
    
  :nice // fast semi 3
   spos? 9 / dup dup z + + fbm | 9 * 1%  1 swap -  1A* ;

  :first dup $ / C ? z / 9 * + 1A ;
   

  : radial 
    suv?  angle1  20  *  
   suv?  |  floor 1 + * // markstrahlen
  //  suv? | 10 * scale? * // add spiral
   // +
     1% 0.9 ! 1A *  ;

: dots suv?
  1% 0.1 ! | 1A * ;
 :  Z* dup z rot * Z ;

   :testwood 
       spos? 
       dup 
           fbm 
       +  // 1 Z*
       | 
       1 % 0.1 0.5 smoothstep 1 A *  ;

 
   : test testwood ;
   : test2 dots ;


